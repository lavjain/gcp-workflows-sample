# This Cloud Workflow orchestrates the file processing steps.

# Define the main entry point of the workflow
main:
  params: [event]  # The 'event' parameter is passed by Eventarc.
  steps:
  - extract_event_data:
      # The bucket and file name are extracted directly from the Eventarc event payload.
      assign:
      - bucket_name: ${event.data.bucket}
      - file_name: ${event.data.name}
      - project_id: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
      - region: "us-central1"

  - get_gcs_object_metadata:
      # Step 1: Get metadata from the GCS file directly using the Workflows built-in connector.
      call: googleapis.storage.v1.objects.get
      args:
        bucket: ${bucket_name}
        object: ${file_name}
      result: gcs_metadata
      # Extract file size and creation/update time (which GCS refers to as 'updated').

  - call_word_count_function:
      # Step 2: Call the Cloud Function to count total words.
      call: http.post
      args:
        # Use the 'region' and 'project_id' variables for the URL.
        url: ${"https://" + region + "-" + project_id + ".cloudfunctions.net/word-count-function"}
        body:
          bucket_name: ${bucket_name}
          file_path: ${file_name}
        auth:
          type: OIDC
      result: word_count_response
      # The result of the HTTP call is a map; parse the 'total_words' from it.

  - call_top_10_words_function:
      # Step 3: Call the Cloud Function to get top 10 words.
      call: http.post
      args:
        # Use the 'region' and 'project_id' variables for the URL.
        url: ${"https://" + region + "-" + project_id + ".cloudfunctions.net/top-10-words-function"}
        body:
          bucket_name: ${bucket_name}
          file_path: ${file_name}
        auth:
          type: OIDC
      result: top_10_words_response
      # The result of the HTTP call is a map; parse the 'top_10_words' from it.

  - assign_output_data:
      # Step 4: Create the output JSON with all collected information.
      assign:
      - output_json:
          filename: ${file_name}
          bucket: ${bucket_name}
          size_bytes: ${gcs_metadata.size}
          upload_date: ${gcs_metadata.updated}
          total_words: ${word_count_response.body.total_words}
          # This will be a JSON object/array.
          top_10_words: ${top_10_words_response.body.top_10_words}

  - call_bigquery_insert_function:
      # Step 5: Call the Cloud Function to insert the JSON into BigQuery.
      call: http.post
      args:
        # Use the 'region' and 'project_id' variables for the URL.
        url: ${"https://" + region + "-" + project_id + ".cloudfunctions.net/insert-bigquery-function"}
        body: ${output_json} # Pass the entire constructed JSON.
        auth:
          type: OIDC
      result: bigquery_insert_response

  - log_success:
      call: sys.log
      args:
        # Using the '>' block scalar for cleaner string expression handling.
        text: >
          ${"Workflow completed successfully for file: " + file_name}
        severity: INFO
